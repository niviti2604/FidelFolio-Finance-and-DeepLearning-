{"trial_id": "07", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "cnn_filters", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 32, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "kernel_size", "default": null, "conditions": [], "min_value": 2, "max_value": 3, "step": 1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "lstm_units", "default": null, "conditions": [], "min_value": 64, "max_value": 256, "step": 32, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout1", "default": 0.1, "conditions": [], "min_value": 0.1, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "dense1_units", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 32, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "dense2_units", "default": null, "conditions": [], "min_value": 64, "max_value": 256, "step": 64, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "dropout2", "default": 0.1, "conditions": [], "min_value": 0.1, "max_value": 0.5, "step": 0.1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "dense2_units2", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 32, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "final_units", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 32, "sampling": "linear"}}, {"class_name": "Float", "config": {"name": "l2_reg", "default": 0.0001, "conditions": [], "min_value": 0.0001, "max_value": 0.01, "step": null, "sampling": "log"}}, {"class_name": "Float", "config": {"name": "epsilon", "default": 0.01, "conditions": [], "min_value": 0.01, "max_value": 0.2, "step": 0.01, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "lr", "default": 0.001, "conditions": [], "values": [0.001, 0.0005, 0.0001], "ordered": true}}], "values": {"cnn_filters": 32, "kernel_size": 3, "lstm_units": 160, "dropout1": 0.5, "dense1_units": 32, "dense2_units": 256, "dropout2": 0.1, "dense2_units2": 64, "final_units": 96, "l2_reg": 0.0010553379358262185, "epsilon": 0.12, "lr": 0.0001}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/Users/suryakameshmantha/anaconda3/lib/python3.11/site-packages/keras_tuner/src/engine/base_tuner.py\", line 274, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Users/suryakameshmantha/anaconda3/lib/python3.11/site-packages/keras_tuner/src/engine/base_tuner.py\", line 239, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/suryakameshmantha/anaconda3/lib/python3.11/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/suryakameshmantha/anaconda3/lib/python3.11/site-packages/keras_tuner/src/engine/tuner.py\", line 233, in _build_and_fit_model\n    results = self.hypermodel.fit(hp, model, *args, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/suryakameshmantha/anaconda3/lib/python3.11/site-packages/keras_tuner/src/engine/hypermodel.py\", line 149, in fit\n    return model.fit(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/Users/suryakameshmantha/anaconda3/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 122, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/Users/suryakameshmantha/anaconda3/lib/python3.11/site-packages/keras/src/utils/traceback_utils.py\", line 124, in error_handler\n    del filtered_tb\nValueError: Exception encountered when calling MaxPooling1D.call().\n\n\u001b[1mNegative dimension size caused by subtracting 2 from 1 for '{{node functional_1/max_pooling1d_1/MaxPool1d}} = MaxPool[T=DT_FLOAT, data_format=\"NHWC\", explicit_paddings=[], ksize=[1, 1, 2, 1], padding=\"VALID\", strides=[1, 1, 2, 1]](functional_1/max_pooling1d_1/MaxPool1d/ExpandDims)' with input shapes: [?,1,1,32].\u001b[0m\n\nArguments received by MaxPooling1D.call():\n  \u2022 inputs=tf.Tensor(shape=(None, 1, 32), dtype=float32)\n"}